# =============================
# NGINX Plus API Gateway Demo
# =============================
# This config shows various API gateway use cases:
# - SSL termination
# - Load balancing with sticky sessions
# - JWT auth, API key auth (static & keyval), OIDC mock
# - NJS script to convert CSV to JSON
# - Rate limiting and error responses

log_format jwt '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
    '$jwt_claim_name $jwt_claim_uid';

# Limit requests per client IP
limit_req_zone $remote_addr zone=perclient:1m rate=2r/s;

# Define upstream servers with sticky session
upstream f1-api {
    zone api_upstreams 64k;
    server 10.1.1.10:8091;
    server 10.1.1.10:8092;
    sticky cookie srv_id expires=1h;
}

# Map static API keys to client names
map $http_x_api_key $api_client_name {
    default "";
    "P5FcvLwkyN7eethF" "client_one";
    "UEt5QAEtiCYLKV5v" "client_two";
}

# Define keyval-based API key zone
keyval_zone zone=apikeyzone:32k state=/etc/nginx/apikey.keyval;
keyval $http_x_kv_api_key $kv_isallowed zone=apikeyzone;

# Include NJS script to convert healthcare CSV to JSON
js_import /etc/nginx/csv_to_json.js;

# Redirect HTTP to HTTPS
server {
    listen 80;
    return 301 https://$host$request_uri;
}

server {
    listen 8443 ssl;
    ssl_certificate     apigwdemo.com.crt;
    ssl_certificate_key apigwdemo.com.key;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_prefer_server_ciphers on;

    # ----------------------
    # Basic API Routing
    # ----------------------
    location /api/f1/drivers  { proxy_pass http://f1-api/drivers; }
    location /api/f1/seasons  { proxy_pass http://f1-api/seasons; }
    location /api/f1/circuits { proxy_pass http://f1-api/circuits; }

    # Demo: Load balancing + rate limit
    location = /get {
        add_header X-Upstream $upstream_addr;
        access_log /var/log/nginx/nginx_access.log main;
        limit_req zone=perclient nodelay;
        limit_req_status 429;
        health_check;
        proxy_pass http://f1-api/drivers;
    }

    # Demo: Regex match + rewrite
    location ~ ^/delay/\d$ {
        rewrite $request_uri /drivers;
        proxy_pass http://f1-api;
    }

    # ----------------------
    # API Key Authentication
    # ----------------------
    location /post {
        auth_request /_validate_apikey;
        proxy_pass http://f1-api/seasons;
    }

    location = /_validate_apikey {
        internal;
        if ($http_x_api_key = "") { return 401; }
        if ($api_client_name = "") { return 403; }
        return 204;
    }

    # ----------------------
    # JWT Authentication
    # ----------------------
    location /drivers {
        auth_jwt on;
        auth_jwt_key_file apisecret.jwk;
        access_log /var/log/nginx/jwt.access.log jwt;

        if ($jwt_claim_uid = 222) {
            add_header X-jwt-claim-uid "$jwt_claim_uid";
            add_header X-jwt-status "Redirected to Backend-API";
            proxy_pass http://f1-api;
        }

        if ($jwt_claim_uid != 222) {
            return 403;
        }
    }

    # ----------------------
    # Key-Value API Key Auth
    # ----------------------
    location = /anything {
        access_log /var/log/nginx/nginx_access.log main;
        if ($kv_isallowed != 1) { return 403; }
        proxy_pass http://f1-api/circuits;
    }

    # ----------------------
    # Healthcare CSV -> JSON (via NJS)
    # ----------------------
    location = /convert-csv {
        js_content csv_to_json.csv_to_json;
    }

    # ----------------------
    # Custom Error Responses
    # ----------------------
    error_page 400 = @400;
    location @400 { return 400 '{"status":400,"message":"Bad request"}\n'; }

    error_page 401 = @401;
    location @401 { return 401 '{"status":401,"message":"Unauthorized"}\n'; }

    error_page 403 = @403;
    location @403 { return 403 '{"status":403,"message":"Forbidden"}\n'; }

    error_page 404 = @404;
    location @404 { return 404 '{"status":404,"message":"Resource not found"}\n'; }

    error_page 405 = @405;
    location @405 { return 405 '{"status":405,"message":"HTTP Method is not supported"}\n'; }

    error_page 429 = @429;
    location @429 { return 429 '{"status":429,"message":"Slow down. You are working too hard"}\n'; }
} 

